<?xml version="1.0" encoding="iso-8859-1"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>FusionCharts v3 Documentation</title>
<link rel="stylesheet" href="../../css/Style.css" type="text/css" />
<script type="text/javascript" src="../../assets/prettify/prettify.js"></script>
<link rel="stylesheet" type="text/css" href="../../assets/prettify/prettify.css" />
<script type="text/javascript" src="../../assets/ui/js/jquery-1.4.2.min.js" ></script>
<script type="text/javascript" src="../../assets/ui/js/lib.js" ></script>
</head>

<body>
<table width="98%" border="0" cellspacing="0" cellpadding="3" align="center">
  <tr> 
    <td class="pageHeader">Combining FusionCharts, JSP &amp; JavaScript (dataURL) method</td>
  </tr>
  <tr> 
    <td valign="top" class="text"><p>FusionCharts v3 offers tremendous integration capabilities with JavaScript. You can easily use FusionCharts and JavaScript to create client side dynamic charts. </p>
      <p>Here, we'll see the JavaScript + Url method - where we ask the chart to fetch new data from server and update itself, without incurring any page refreshes. The entire application resides in a single page which makes it a seamless experience for your end viewers.</p>
      <p><strong>Before you proceed with the contents in this page, we strictly recommend you to please go through the sections &quot;How FusionCharts works?&quot; and &quot;Basic Examples&quot;, as we'll directly use a lot of concepts defined in those sections.</strong></p>
      <p class="highlightBlock">The code discussed in this example is present 
        in<span class="codeInline"> Download Package &gt; Code &gt; J2EE &gt; DB_JS_dataURL 
        </span>folder. </p>
    </td>
  </tr>
  
  <tr>
    <td valign="top" class="header">Mission for this example </td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>Let us first define what we want to achieve in this example. We'll carry on from our previous drill-down example and convert it into a single page example. In our previous example, we were showing the Production Summary of all the factories in a pie chart. When the user clicked on a pie slice, he was taken to another page, where a detailed date-wise chart was shown for the required factory. </p>
      <p>In this example, we'll assimilate both the charts in a single page and make them interact with each other using JavaScript, thereby making the end-user experience smooth. Effectively, we will do the following:</p>
      <ol>
        <li>Contain both the pie chart (summary) and column chart (detailed) in 
          one page (<span class="codeInline">Default.jsp</span>).</li>
        <li>When the page loads, the pie chart would use <span class="codeInline">dataXML</span> 
          method to show summary of all factories. This data will be built in the bean <span class="codeInline">FactoriesBean</span>. </li>
        <li>The column chart would initialize with no data, as the user has not selected a factory initially. We'll customize the &quot;<span class="codeInline">No data to display</span>&quot; message of the chart to show a friendly message.</li>
      <li>The pie chart would have JavaScript links defined for each pie slice. This JavaScript links refer to <span class="codeInline">updateChart()</span> JavaScript function present on the same page. We'll later see how to hand code this function. When a pie is clicked, the <span class="codeInline">factory ID </span>is passed to this function. </li>
        <li>The <span class="codeInline"> updateChart()</span> function is responsible 
          for updating the column chart. It generates a dataURL link by including 
          the <span class="codeInline">factoryId</span> as a part of dataURL (<span class="codeInline">FactoryData.jsp</span>). 
          <span class="codeInline">FactoryData.jsp</span> is the data provider 
          page for the detailed column chart. Once the <span class="codeInline">dataURL</span> 
          is built, it conveys this dataURL to the column chart.</li>
        <li>The column chart would now accept this <span class="codeInline">dataURL</span>, 
          send a request to <span class="codeInline">FactoryData.jsp</span> for 
          XML data, accept it, parse it and finally render.</li>
      </ol>    </td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="header">Creating the charts container page </td>
  </tr>
  <tr>
    <td valign="top" class="text">
      <p>Both the charts and JavaScript functions to 
        manipulate the charts is contained in <span class="codeInline">Default.jsp</span>. 
        It has the following code: </p>
    </td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock code_container"><p>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;<br />
        &lt;%@ taglib prefix=&quot;tags&quot; tagdir=&quot;/WEB-INF/tags&quot;%&gt;<br />
        &lt;%@ taglib uri=&quot;http://www.fusioncharts.com/jsp/core&quot; prefix=&quot;fc&quot;%&gt;<br />
        &lt;jsp:useBean id=&quot;factoriesBean&quot;<br />
class=&quot;com.fusioncharts.sampledata.FactoriesBean&quot; /&gt;<br />
&lt;jsp:useBean id=&quot;chart2Data&quot;<br />
class=&quot;com.fusioncharts.sampledata.EmptyRenderData&quot; /&gt;<br />
&lt;c:set var=&quot;folderPath&quot; value=&quot;../../FusionCharts/&quot; /&gt;<br />
&lt;c:set var=&quot;title&quot; value=&quot;FusionCharts - Database + JavaScript Example&quot;<br />
scope=&quot;request&quot; /&gt;<br />
&lt;c:set var=&quot;header1&quot;<br />
value=&quot;FusionCharts Database + JavaScript (dataURL method) Example&quot;<br />
scope=&quot;request&quot; /&gt;<br />
&lt;c:set var=&quot;header2&quot;<br />
value=&quot;Inter-connected charts - Click on any pie slice to see detailed<br />
chart below.&quot;<br />
scope=&quot;request&quot; /&gt;<br />
&lt;c:set var=&quot;intro&quot;<br />
value=&quot;The charts in this page have been dynamically generated using<br />
data contained in a database.&quot;<br />
scope=&quot;request&quot; /&gt;<br />
&lt;c:set var=&quot;jsPath&quot; value=&quot;../../FusionCharts/FusionCharts.js&quot;<br />
scope=&quot;request&quot; /&gt;</p>
        <p> &lt;!-- <br />
   &nbsp;&nbsp; In this example, we show a combination of database + JavaScript (dataURL method)<br />
   &nbsp;&nbsp; rendering using FusionCharts.<br />
    <br />
   &nbsp;&nbsp; The entire app (page) can be summarized as under. This app shows the break-down<br />
   &nbsp;&nbsp; of factory wise output generated. In a pie chart, we first show the sum of quantity<br />
   &nbsp;&nbsp; generated by each factory. These pie slices, when clicked would show detailed date-wise<br />
   &nbsp;&nbsp; output of that factory. The detailed data would be dynamically pulled by the column<br />
   &nbsp;&nbsp; chart from another JSP page. There are no page refreshes required. Everything<br />
   &nbsp;&nbsp; is done on one single page.<br />
    <br />
   &nbsp;&nbsp; The XML data for the pie chart is fully created in JSP at run-time. JSP interacts<br />
   &nbsp;&nbsp; with the database and creates the XML for this.<br />
   &nbsp;&nbsp; Now, for the column chart (date-wise output report), each time we need the data<br />
   &nbsp;&nbsp; we dynamically submit request to the server with the appropriate factoryId. The server<br />
   &nbsp;&nbsp; responds with an XML document, which we accept and update chart at client side.<br />
    <br />
    --&gt; <br />&lt;tags:template2&gt;<br />
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;<br />
    /** <br />
    * updateChart method is invoked when the user clicks on a pie slice.<br />
    * In this method, we get the index of the factory after which we request for XML data<br />
    * for that that factory from FactoryData.asp, and finally<br />
    * update the Column Chart.<br />
    * @param factoryIndex Sequential Index of the factory.<br />
    */<br />
    function updateChart(factoryIndex) {<br />
   &nbsp;&nbsp; //DataURL for the chart<br />
    &nbsp;&nbsp; var strURL = &quot;FactoryData.jsp?factoryId=&quot; + factoryIndex;</p>
        <p> &nbsp;&nbsp; //Sometimes, the above Url and XML data gets cached by the browser.<br />
    &nbsp;&nbsp; //If you want your charts to get new XML data on each request,<br />
    &nbsp;&nbsp; //you can add the following line:<br />
    &nbsp;&nbsp; //strURL = strURL + &quot;&amp;currTime=&quot; + getTimeForURL();<br />
    &nbsp;&nbsp; //getTimeForURL method is defined below and needs to be included<br />
    &nbsp;&nbsp; //This basically adds a ever-changing parameter which bluffs<br />
    &nbsp;&nbsp; //the browser and forces it to re-load the XML data every time.</p>
        <p> &nbsp;&nbsp; //URLEncode it - NECESSARY.<br />
    &nbsp;&nbsp; strURL = escape(strURL);</p>
        <p> &nbsp;&nbsp; //Get reference to chart object using Dom ID &quot;FactoryDetailed&quot;<br />
    &nbsp;&nbsp; var chartObj = FusionCharts.items('FactoryDetailed');<br />
    &nbsp;&nbsp; //Send request for XML<br />
    &nbsp;&nbsp; chartObj.setXMLUrl(strURL);<br />
    }<br />
    /**<br />
    * getTimeForURL method returns the current time <br />
    * in a Url friendly format, so that it can be appended to<br />
    * dataURL for effective non-caching.<br />
    */<br />
    function getTimeForURL() {<br />
    &nbsp;&nbsp; var dt = new Date();<br />
    &nbsp;&nbsp; var strOutput = &quot;&quot;;<br />
    &nbsp;&nbsp; strOutput = dt.getHours() + &quot;_&quot; + dt.getMinutes() + &quot;_&quot;<br />
    &nbsp;&nbsp; + dt.getSeconds() + &quot;_&quot; + dt.getMilliseconds();<br />
    &nbsp;&nbsp; return strOutput;<br />
    }<br />
&lt;/SCRIPT&gt;<br />
<br />
&lt;!-- Create the chart - Pie 3D Chart with data contained in bean --&gt;</p>
        <p> &lt;fc:render chartId=&quot;${factoriesBean.chartId}&quot;<br />
   &nbsp;&nbsp; swfFilename=&quot;${folderPath}${factoriesBean.filename}&quot;<br />
   &nbsp;&nbsp; width=&quot;${factoriesBean.width}&quot; height=&quot;${factoriesBean.height}&quot;<br />
   &nbsp;&nbsp; debugMode=&quot;false&quot; xmlData=&quot;${factoriesBean.xml}&quot; useSingleQuotes=&quot;${factoriesBean.useSingleQuotes}&quot;/&gt;</p>
        <p>&lt;!-- <br />
   &nbsp;&nbsp; Column 2D Chart with changed &quot;No data to display&quot; message<br />
   &nbsp;&nbsp; We initialize the chart with &lt;chart&gt;&lt;/chart&gt;<br />
    --&gt;</p>
        <p> &lt;fc:render chartId=&quot;${chart2Data.chartId}&quot;<br />
   &nbsp;&nbsp; swfFilename=&quot;${folderPath}${chart2Data.filename}${chart2Data.noDataParameter}&quot;<br />
   &nbsp;&nbsp; width=&quot;${chart2Data.width}&quot; height=&quot;${chart2Data.height}&quot;<br />
   &nbsp;&nbsp; debugMode=&quot;false&quot; registerWithJS=&quot;true&quot; xmlData=&quot;${chart2Data.xml}&quot; /&gt;<br />
&lt;/tags:template2&gt;</p>
    </td>
  </tr>
  <tr>
    <td valign="top" class="text">
      <p>Dissecting the code in this page, we see that, </p>
      <ul>
          <li>This page uses template2 tag file and provides the path to the js file to it via the variable jsPath. </li>
          <li>Then there are the javascript functions, which we will discuss in a while. </li>
          <li>Finally, the two charts are rendered in the page using the <span class="codeInline">fc:render</span> tag. <br />
              The data for the first chart is obtained from FactoriesBean and the second chart uses the EmptyRenderData bean. <br />
              The data for the second chart will be provided dynamically on clicking on the pie slice in the first chart. </li>
          </ul>      
      <p class="header">First Chart </p>
      <p>The Pie 3D chart is created using dataXML method. The Pie 3D chart has its DOM Id as <span class="codeInline">FactorySum</span> defined in the <span class="codeInline">FactoriesBean</span>:</p>
      <p class="codeBlock code_container">protected String chartId=&quot;FactorySum&quot;;</p>
      <p>Leaving aside the usual render tag, we will directly jump to the code in the bean used to construct the xml. This is similar to the one we saw in the drill-down example, only the link will be different this time.</p>      <p class="codeBlock code_container">private String getFactoryXML(){<br />
//strXML will be used to store the entire XML document generated<br />
String strXML=&quot;&quot;;<br />
try{<br />
DBConnection dbConn = new DBConnection();<br />
Connection oConn= dbConn.getConnection();<br />
//Database Objects - Initialization<br />
Statement st1=null,st2=null;<br />
ResultSet rs1=null,rs2=null;<br />
<br />
String strQuery=&quot;&quot;;<br />
<br />
Map&lt;String,String&gt; chartAttributes=new HashMap&lt;String, String&gt;();;<br />
chartAttributes.put(&quot;caption&quot;, &quot;Factory Output report&quot;);<br />
chartAttributes.put(&quot;subCaption&quot;, &quot;By Quantity&quot;);<br />
chartAttributes.put(&quot;pieSliceDepth&quot;, &quot;30&quot;);<br />
chartAttributes.put(&quot;showBorder&quot;, &quot;1&quot;);<br />
chartAttributes.put(&quot;formatNumberScale&quot;, &quot;0&quot;);<br />
chartAttributes.put(&quot;numberSuffix&quot;, &quot; Units&quot;);<br />
<br />
DOMHelper domHelper = new DOMHelper();<br />
Document chartDoc = domHelper.getDocument();<br />
Element rootElement = chartDoc.createElement(&quot;chart&quot;);<br />
domHelper.addAttributesToElement(rootElement, chartAttributes);<br />
<br />
//Generate the chart element<br />
//strXML = &quot;&lt;chart caption='Factory Output report' subCaption='By Quantity' pieSliceDepth='30' showBorder='1' formatNumberScale='0' numberSuffix=' Units' &gt;&quot;; <br />
<br />
//Iterate through each factory<br />
strQuery = &quot;select * from Factory_Master&quot;;<br />
st1=oConn.createStatement();<br />
rs1=st1.executeQuery(strQuery);<br />
<br />
String factoryId=null;<br />
String factoryName=null;<br />
String totalOutput=&quot;&quot;;<br />
<br />
while(rs1.next()) {<br />
totalOutput=&quot;&quot;;<br />
factoryId=rs1.getString(&quot;FactoryId&quot;);<br />
factoryName=rs1.getString(&quot;FactoryName&quot;);<br />
//Now create second recordset to get details for this factory<br />
strQuery = &quot;select sum(Quantity) as TotOutput from Factory_Output where FactoryId=&quot; + factoryId;<br />
st2=oConn.createStatement();<br />
rs2 = st2.executeQuery(strQuery);<br />
if(rs2.next()){<br />
totalOutput=rs2.getString(&quot;TotOutput&quot;);<br />
}<br />
//Generate &lt;set label='..' value='..'/&gt; <br />
//strXML += &quot;&lt;set label='&quot; + factoryName + &quot;' value='&quot; +totalOutput+ &quot;' link='javaScript:updateChart(&quot;+factoryId + &quot;)'/&gt;&quot;;<br />
Element setElem = chartDoc.createElement(&quot;set&quot;);<br />
setElem.setAttribute(&quot;label&quot;, factoryName);<br />
setElem.setAttribute(&quot;value&quot;, totalOutput);<br />
<strong>setElem.setAttribute(&quot;link&quot;, &quot;javaScript:updateChart(&quot;+factoryId + &quot;)&quot;);</strong><br />
rootElement.appendChild(setElem);<br />
//close the resultset,statement<br />
//enclose them in try catch block<br />
try {<br />
if(null!=rs2){<br />
rs2.close();<br />
rs2=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the resultset&quot;);<br />
}<br />
try{<br />
if(null!=st2) {<br />
st2.close();<br />
st2=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
}<br />
//Finally, close &lt;chart&gt; element<br />
//strXML += &quot;&lt;/chart&gt;&quot;;<br />
chartDoc.appendChild(rootElement);<br />
strXML=domHelper.getXMLString(chartDoc);<br />
//close the resultset,statement,connection<br />
//enclose them in try catch block<br />
try {<br />
if(null!=rs1){<br />
rs1.close();<br />
rs1=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the resultset&quot;);<br />
} <br />
try {<br />
if(null!=st1) {<br />
st1.close();<br />
st1=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
try {<br />
if(null!=oConn) {<br />
oConn.close();<br />
oConn=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the connection&quot;);<br />
}<br />
<br />
<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
// not required since we will useSingleQuotes in fc:renderHTML tag<br />
//strXML = strXML.replaceAll(&quot;\&quot;&quot;, &quot;\\\\\&quot;&quot;);<br />
return strXML;<br />
}</p>
      <p class="text">We have provided the link to the updateChart javascript function with factoryId as the parameter. Since we are using dom to create the xml, our code for this turns out to be:      </p>
      <p class="codeBlock  code_container"><strong>setElem.setAttribute(&quot;link&quot;, &quot;javaScript:updateChart(&quot;+factoryId + &quot;)&quot;);</strong> </p>      <p class="header">Drill-down Chart </p>
      <p class="text">The chart obtained on drilling-down is present in the same page, Default.jsp. The data to this chart is obtained from the javascript function updateChart. (which in turn contacts FactoryData.jsp for detailed data for the factory) </p>      <p>We first create the XML data document for Pie chart - summary of factory output. For each <span class="codeInline">&lt;set&gt;</span>, we provide a JavaScript link to the <span class="codeInline">updateChart()</span> function and pass the factory ID to it as shown in the line below:</p>
      <p class="text">For the second chart, we render  an empty Column 2D chart  with <span class="codeInline">&lt;chart&gt;&lt;/chart&gt;</span> data initially. We also change the &quot;<span class="codeInline">No data to display.</span>&quot; error to a friendly and intuitive &quot;<span class="codeInline">Please select a factory from pie chart above to view detailed data.</span>&quot; This chart has its DOM Id as <span class="codeInline">FactoryDetailed</span>. (in EmptyRenderData.java) </p>
      <p class="codeBlock code_container">protected String chartId=&quot;FactoryDetailed&quot;;</p>
      <p class="text">This chart has to be registered with JavaScript since it obtains its data through javascript. This can be done by setting the <span class="codeInline">registerWithJS</span> attribute to true as shown:</p>      <p class="codeBlock code_container"> &lt;fc:render chartId=&quot;${chart2Data.chartId}&quot;<br />
        &nbsp;&nbsp;
swfFilename=&quot;${folderPath}${chart2Data.filename}${chart2Data.noDataParameter}&quot;<br />
&nbsp;&nbsp;
width=&quot;${chart2Data.width}&quot; height=&quot;${chart2Data.height}&quot;<br />
&nbsp;&nbsp;
debugMode=&quot;false&quot; <strong>registerWithJS=&quot;true&quot;</strong> xmlData=&quot;${chart2Data.xml}&quot; /&gt;</p>
      <p>  The pie chart shows 
        the summary data provided to it using dataXML way. The column chart shows 
        the above &quot;friendly&quot; error message. Now, when each pie slice 
        is clicked, the <span class="codeInline">updateChart()</span> JavaScript 
        function is called and the <span class="codeInline">factoryID</span> of 
        the pie is passed to it. This function is responsible for updating the 
        column chart and contains the following code: </p>
    </td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock code_container">&nbsp;<strong>function updateChart(factoryIndex){ </strong><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codeComment">//DataURL for the chart</span><br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var strURL = &quot;FactoryData.jsp?factoryId=&quot; 
      + factoryIndex;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codeComment">&nbsp;//Sometimes, the above Url and XML data gets cached by the browser.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//If you want your charts to get new XML data on each request,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//you can add the following line:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//strURL = strURL + &quot;&amp;currTime=&quot; + getTimeForURL();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//getTimeForURL method is defined below and needs to be included<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This basically adds a ever-changing parameter which bluffs<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the browser and forces it to re-load the XML data every time.</span><br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codeComment">&nbsp;//URLEncode it - NECESSARY.</span><br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strURL = escape(strURL);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codeComment">&nbsp;//Get reference to chart object using Dom ID &quot;FactoryDetailed&quot;</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chartObj = FusionCharts.items(&quot;FactoryDetailed&quot;); <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codeComment">&nbsp;//Send request for XML</span><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>chartObj.setXMLUrl(strURL);</strong><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>Here, </p>
      <ol>
        <li>We first create a <span class="codeInline">dataURL</span> string by 
          appending the <span class="codeInline">factoryID</span> to <span class="codeInline">FactoryData.jsp</span>.        </li>
        <li>Thereafter, we Url Encode this <span class="codeInline">dataURL</span>. </li>
        <li>Finally, we convey this <span class="codeInline">dataURL</span> to 
          the column chart. To do so, we first get a reference to the column chart 
          using it's DOM Id <span class="codeInline">FactoryDetailed</span>. We 
          use the FusionCharts.items() function defined 
          for FusionCharts object <span class="codeInline"></span> to do so. </li>
        <li>Once we've the reference to the chart, we simply call the <span class="codeInline">setXMLUrl</span> method of the chart and pass it the Url to request data from. </li>
        <li>This updates the chart with new data. </li>
      </ol>
      <p>This completes our front-end for the chart. We now just need to build <span class="codeInline">FactoryData.jsp</span> 
        page, which is responsible to provide detailed data to column chart. It 
        contains the following code: </p>
    </td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock code_container">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;<br />
        &lt;jsp:useBean id=&quot;detailsBean&quot;<br />
class=&quot;com.fusioncharts.sampledata.FactoryDetailsBean&quot; /&gt;
<p><strong>&lt;c:set target=&quot;${pageContext.response}&quot; property=&quot;contentType&quot; value=&quot;text/xml&quot;/&gt;<br />
&lt;c:set target=&quot;${detailsBean}&quot; property=&quot;factoryId&quot; value=&quot;${param.factoryId}&quot;/&gt;<br />
&lt;c:out value=&quot;${detailsBean.xml}&quot; escapeXml=&quot;false&quot;/&gt;</strong></p></td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>In this page, we basically request the factory Id passed to it as querystring, set it to the bean FactoryDetailsBean, obtain the xml from the bean and finally write it to output stream. </p>
        <p>The construction of the xml in the bean is done, every time the <span class="codeInline">setFactoryId</span> method is called. The code for building the xml for the given <span class="codeInline">factoryId</span> is shown below:</p>
        <p class="codeBlock code_container">private String getFactoryDetailsXML(String factoryId){<br />
//strXML will be used to store the entire XML document generated<br />
String strXML=&quot;&quot;;<br />
try{<br />
DBConnection dbConn = new DBConnection();<br />
Connection oConn= dbConn.getConnection();<br />
//Database Objects - Initialization<br />
Statement st=null;<br />
ResultSet rs=null;<br />
java.sql.Date date=null;<br />
java.util.Date uDate=null;<br />
String uDateStr=&quot;&quot;;<br />
String quantity=&quot;&quot;;<br />
<br />
String strQuery=&quot;&quot;;<br />
<br />
<br />
Map&lt;String,String&gt; chartAttributes=new HashMap&lt;String, String&gt;();<br />
chartAttributes.put(&quot;caption&quot;, &quot;Factory &quot;+factoryId+&quot; Output&quot;);<br />
chartAttributes.put(&quot;subCaption&quot;, &quot;(In Units)&quot;);<br />
chartAttributes.put(&quot;xAxisName&quot;, &quot;Date&quot;);<br />
chartAttributes.put(&quot;showValues&quot;, &quot;1&quot;);<br />
chartAttributes.put(&quot;labelStep&quot;, &quot;2&quot;);<br />
chartAttributes.put(&quot;palette&quot;, &quot;2&quot;);<br />
<br />
DOMHelper domHelper = new DOMHelper();<br />
Document chartDoc = domHelper.getDocument();<br />
<strong>Element rootElement = chartDoc.createElement(&quot;chart&quot;);<br />
domHelper.addAttributesToElement(rootElement, chartAttributes);</strong><br />
<br />
<br />
//Now, we get the data for that factory<br />
<strong>strQuery = &quot;select * from Factory_Output where FactoryId=&quot; + factoryId+ &quot; order by DatePro Asc &quot;;</strong><br />
<br />
st=oConn.createStatement();<br />
rs=st.executeQuery(strQuery);<br />
<br />
<br />
while(rs.next()) {<br />
date=rs.getDate(&quot;DatePro&quot;);<br />
quantity=rs.getString(&quot;Quantity&quot;);<br />
if(date!=null) {<br />
uDate=new java.util.Date(date.getTime());<br />
SimpleDateFormat sdf=new SimpleDateFormat(&quot;dd/MM&quot;);<br />
uDateStr=sdf.format(uDate);<br />
}<br />
//Generate &lt;set label='..' value='..'/&gt; <br />
<strong>Element setElem = chartDoc.createElement(&quot;set&quot;);<br />
setElem.setAttribute(&quot;label&quot;, uDateStr);<br />
setElem.setAttribute(&quot;value&quot;, quantity);<br />
rootElement.appendChild(setElem);</strong><br />
}<br />
//Finally, close &lt;chart&gt; element<br />
chartDoc.appendChild(rootElement);<br />
strXML=domHelper.getXMLString(chartDoc);<br />
//close the resultset,statement,connection<br />
//enclose them in try catch block<br />
try {<br />
if(null!=rs){<br />
rs.close();<br />
rs=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the resultset&quot;);<br />
}<br />
try{<br />
if(null!=st) {<br />
st.close();<br />
st=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
try {<br />
if(null!=oConn) {<br />
oConn.close();<br />
oConn=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the connection&quot;);<br />
}<br />
<br />
<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
<br />
return strXML;<br />
}<br />
        </p>
        <p class="text">Notice that we have used DOM to create the xml, hence use SingleQuotes attribute should be set to true in the <span class="codeInline">fc:render</span> tag. </p>
        <p class="text">We iterate through each record in the table Factory_Output for the  factory with the given factoryId. The output details are then appended to the xml. </p>        <p>When you now see the application, the initial state would look as under: </p></td>
  </tr>
  <tr>
    <td valign="top" class="text"><img src="../../Images/Code_JS_URL_Ini.jpg" width="511" height="458" class="imageBorder" /></td>
  </tr>
  <tr>
    <td valign="top" class="text">And when you click on a pie slice, the following would appear on the same page (without involving any browser refreshes): </td>
  </tr>
  <tr>
    <td valign="top" class="text"><img src="../../Images/Code_JS_URL_Fin.jpg" width="610" height="526" /></td>
  </tr>
  <tr>
    <td valign="top" class="text">This example demonstrated a very basic sample of the integration capabilities possible with FusionCharts v3. For advanced demos, you can see and download our FusionCharts Blueprint/Demo Applications. </td>
  </tr>
</table>
</body>
</html>
