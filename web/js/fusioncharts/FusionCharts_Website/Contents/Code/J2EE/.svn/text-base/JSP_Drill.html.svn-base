<?xml version="1.0" encoding="iso-8859-1"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>FusionCharts v3 Documentation</title>
<link rel="stylesheet" href="../../css/Style.css" type="text/css" />
<script type="text/javascript" src="../../assets/prettify/prettify.js"></script>
<link rel="stylesheet" type="text/css" href="../../assets/prettify/prettify.css" />
<script type="text/javascript" src="../../assets/ui/js/jquery-1.4.2.min.js" ></script>
<script type="text/javascript" src="../../assets/ui/js/lib.js" ></script>
</head>

<body>
<table width="98%" border="0" cellspacing="0" cellpadding="3" align="center">
  <tr> 
    <td class="pageHeader">Using FusionCharts with JSP &gt; Creating Drill-down charts</td>
  </tr>
  <tr> 
    <td valign="top" class="text"><p>In our previous example, we had used FusionCharts to plot a chart using data stored in database. We'll now extend that example itself to create a drill-down chart which can show more information.</p>
    <p>If you recall from previous example, we were showing the sum of factory output in a pie chart as under: </p></td>
  </tr>
  <tr>
    <td valign="top" class="text"><img src="../../Images/Code_DBOut.jpg" width="572" height="273" class="imageBorder" /></td>
  </tr>
  <tr>
    <td valign="top" class="text">
      <p>In this example, we'll extend it, so that when a user clicks on a pie slice for a factory, he can drill down to see date wise production for that factory. </p>
    </td>
  </tr>
  
  <tr>
    <td valign="top" class="header">Setting up the pie chart for Link </td>
  </tr>
  <tr>
    <td valign="top" class="text">
      <p>To set up the pie chart to enable links for 
        drill-down involves just minor tweaking of our previous bean used in <span class="codeInline">BasicDBExampleUsingBean.jsp</span>. 
        We basically need to add the <span class="codeInline">link</span> attribute 
        for each<span class="codeInline"> &lt;set&gt;</span> element. We create 
        a new page <span class="codeInline">Default.jsp</span> from the previous 
        page in <span class="codeInline">DBExample</span> folder with exactly same code. We create a bean <span class="codeInline">FactoriesWithLinkToDetailedBean</span> with following code to construct xml:</p>
    </td>
  </tr>
  <tr>
    <td valign="top"><pre class="codeBlock code_container">private String getFactoryXML(){<br />		//strXML will be used to store the entire XML document generated<br />		String strXML=&quot;&quot;;<br />		try{<br />			DBConnection dbConn = new DBConnection();<br />			Connection oConn= dbConn.getConnection();<br />			//Database Objects - Initialization<br />			Statement st1=null,st2=null;<br />			ResultSet rs1=null,rs2=null;<br />			<br />			String strQuery=&quot;&quot;;<br />		<br />			<br />		   Map&lt;String,String&gt; chartAttributes=new HashMap&lt;String, String&gt;();;<br />		   chartAttributes.put(&quot;caption&quot;, &quot;Factory Output report&quot;);<br />		   chartAttributes.put(&quot;subCaption&quot;, &quot;By Quantity&quot;);<br />		   chartAttributes.put(&quot;pieSliceDepth&quot;, &quot;30&quot;);<br />		   chartAttributes.put(&quot;showBorder&quot;, &quot;1&quot;);<br />		   chartAttributes.put(&quot;formatNumberScale&quot;, &quot;0&quot;);<br />		   chartAttributes.put(&quot;numberSuffix&quot;, &quot; Units&quot;);<br />		   <br />		   DOMHelper domHelper = new DOMHelper();<br />		   Document chartDoc = domHelper.getDocument();<br />		   Element rootElement = chartDoc.createElement(&quot;chart&quot;);<br />		   domHelper.addAttributesToElement(rootElement, chartAttributes);<br />		   <br />			//Generate the chart element<br />			//strXML = &quot;&lt;chart caption='Factory Output report' subCaption='By Quantity' pieSliceDepth='30' showBorder='1' formatNumberScale='0' numberSuffix=' Units' &gt;&quot;;	<br />			<br />			//Iterate through each factory<br />			strQuery = &quot;select * from Factory_Master&quot;;<br />			st1=oConn.createStatement();<br />			rs1=st1.executeQuery(strQuery);<br />			<br />			String factoryId=null;<br />			String factoryName=null;<br />			String totalOutput=&quot;&quot;;<br />			<br />			while(rs1.next()) {<br />				totalOutput=&quot;&quot;;<br />				factoryId=rs1.getString(&quot;FactoryId&quot;);<br />				factoryName=rs1.getString(&quot;FactoryName&quot;);<br />				//Now create second recordset to get details for this factory<br />				strQuery = &quot;select sum(Quantity) as TotOutput from Factory_Output where FactoryId=&quot; + factoryId;<br />				st2=oConn.createStatement();<br />				rs2 = st2.executeQuery(strQuery);<br />				if(rs2.next()){<br />					totalOutput=rs2.getString(&quot;TotOutput&quot;);<br />				}<br />				//Generate &lt;set label='..' value='..'/&gt;		<br />				//strXML += &quot;&lt;set label='&quot; + factoryName + &quot;' value='&quot; +totalOutput+ &quot;' link='javaScript:updateChart(&quot;+factoryId + &quot;)'/&gt;&quot;;<br />				   Element setElem = chartDoc.createElement(&quot;set&quot;);<br />				   setElem.setAttribute(&quot;label&quot;, factoryName);<br />				   setElem.setAttribute(&quot;value&quot;, totalOutput);<br />			<strong>	// Encoding the Url since it has a parameter<br />				   String strDataURL = FusionChartsHelper.encodeDataURL(&quot;Detailed.jsp?factoryId=&quot;+factoryId,false);<br />				   setElem.setAttribute(&quot;link&quot;, strDataURL);</strong><br />				   rootElement.appendChild(setElem);<br />				//close the resultset,statement<br />				//enclose them in try catch block<br />				try {<br />					if(null!=rs2){<br />						rs2.close();<br />						rs2=null;<br />					}<br />				}catch(java.sql.SQLException e){<br />				 	System.out.println(&quot;Could not close the resultset&quot;);<br />				}<br />				try{<br />					if(null!=st2) {<br />						st2.close();<br />						st2=null;<br />					}<br />				}catch(java.sql.SQLException e){<br />				 	System.out.println(&quot;Could not close the statement&quot;);<br />				}<br />			}<br />			//Finally, close &lt;chart&gt; element<br />			//strXML += &quot;&lt;/chart&gt;&quot;;<br />			chartDoc.appendChild(rootElement);<br />			strXML=domHelper.getXMLString(chartDoc);<br />			//close the resultset,statement,connection<br />			//enclose them in try catch block<br />			try {<br />				if(null!=rs1){<br />					rs1.close();<br />					rs1=null;<br />				}<br />			}catch(java.sql.SQLException e){<br />				 System.out.println(&quot;Could not close the resultset&quot;);<br />			}	<br />			try {<br />				if(null!=st1) {<br />					st1.close();<br />					st1=null;<br />				}<br />		    }catch(java.sql.SQLException e){<br />			 	 System.out.println(&quot;Could not close the statement&quot;);<br />			}<br />			try {<br />				if(null!=oConn) {<br />				    oConn.close();<br />				    oConn=null;<br />				}<br />		    }catch(java.sql.SQLException e){<br />			 	 System.out.println(&quot;Could not close the connection&quot;);<br />			}<br />		   <br />		    <br />		}catch(java.sql.SQLException e){<br />		 	System.out.println(&quot;Could not close the statement&quot;);<br />		}<br />		// not required since we will useSingleQuotes in fc:renderHTML tag<br />		//strXML = strXML.replaceAll(&quot;\&quot;&quot;, &quot;\\\\\&quot;&quot;);<br />		return strXML
}
</pre>
    </td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>As you can see in the code above, we're doing the following:</p>
      <ol>
          <li>We connect to the database using DBConnection class. </li>
          <li>Thereafter, we generate the XML data document by iterating through the resultset. We construct the xml using dom.To each <span class="codeInline">&lt;set&gt;</span> element, we add the <span class="codeInline">link</span> attribute, which points to <span class="codeInline">Detailed.jsp</span> - the page that contains the chart to show details. We pass the factory id of the respective factory by appending it to the link. The value for the link attribute is Url encoded. This is an important step. <br />
              <p class="codeBlock code_container">// Encoding the Url since it has a parameter<br />
                      String strDataURL = FusionChartsHelper.encodeDataURL(&quot;Detailed.jsp?factoryId=&quot;+factoryId,false);<br />
                      setElem.setAttribute(&quot;link&quot;, strDataURL);<br />
          </p>
              </li>
          <li>Finally, we return the xml as a string obtained from the xml document. </li>
      </ol>
      <p>Let's now shift our attention to <span class="codeInline">Detailed.jsp</span> 
        page - the page which renders the second chart based on the click in the first chart. </p>
    </td>
  </tr>
  
  <tr>
    <td valign="top" class="header">Creating the detailed data chart page </td>
  </tr>
  <tr>
    <td valign="top" class="text">
      <p>The page <span class="codeInline">Detailed.jsp</span> 
        contains the following code: </p>
    </td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;<br />&lt;%@ taglib prefix=&quot;tags&quot; tagdir=&quot;/WEB-INF/tags&quot;%&gt;<br />&lt;%@ taglib uri=&quot;http://www.fusioncharts.com/jsp/core&quot; prefix=&quot;fc&quot;%&gt;<br />&lt;jsp:useBean id=&quot;factoryDetails&quot; class=&quot;com.fusioncharts.sampledata.FactoryDetailsBean&quot; /&gt;<br />&lt;c:set var=&quot;folderPath&quot; value=&quot;../../FusionCharts/&quot; /&gt;<br />&lt;c:set var=&quot;title&quot; value=&quot;FusionCharts - Database + Drill-Down Example&quot;	scope=&quot;request&quot; /&gt;<br />&lt;c:set var=&quot;header1&quot; value=&quot;FusionCharts Database and Drill-Down Example&quot; scope=&quot;request&quot; /&gt;<br />&lt;c:set var=&quot;header2&quot; value=&quot;Detailed report for the factory&quot; scope=&quot;request&quot; /&gt;<br />&lt;c:set var=&quot;jsPath&quot; value=&quot;${folderPath}&quot; scope=&quot;request&quot;/&gt;<br /><strong>&lt;c:set target=&quot;${factoryDetails}&quot; property=&quot;factoryId&quot; value=&quot;${param.factoryId}&quot;/&gt;	</strong>
        <p> &lt;!-- <br />
    This page is invoked from Default.jsp. When the user clicks on a pie<br />
    slice in Default.jsp, the factory Id is passed to this page. We need<br />
    to get that factory id, get the information from database and then show<br />
    a detailed chart.<br />
    --&gt; </p>
        <p>&lt;tags:template2&gt;<br />
&lt;!-- Create the chart - Pie 3D Chart with data contained in bean --&gt;</p>
        <p> &lt;fc:render chartId=&quot;${factoryDetails.chartId}&quot;<br />
    swfFilename=&quot;${folderPath}${factoryDetails.filename}&quot;<br />
    width=&quot;${factoryDetails.width}&quot; height=&quot;${factoryDetails.height}&quot;<br />
    debugMode=&quot;false&quot; xmlData=&quot;${factoryDetails.xml}&quot; useSingleQuotes=&quot;${factoryDetails.useSingleQuotes}&quot;/&gt;<br />
    <br />
&lt;/tags:template2&gt;<br />
        </p></td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>In this page, we're:</p>
      <ol>
          <li>Setting the value for jsPath the path to the folder containing the <span class="codeInline"></span> JavaScript class, to enable easy embedding of FusionCharts.This is used by the template2 tag file for including the javascript file. </li>
          <li>Requesting the factory id for which we've to show detailed data. This value was sent to us as querystring, as a part of pie chart link.</li>
          <li>Setting the value for factoryId in the bean <span class="codeInline">FactoryDetailsBean</span>.</li>
          <li>Getting the requisite data for this factory from database and then convert it into XML using string concatenation. This is done in the bean and happens whenever setFactoryId() is invoked. </li>
          <li>Finally,  rendering a Column 2D chart (${factoryDetails.filename}) to show detailed data, by using the fc:render tag.</li>
          </ol>
      <p>The main code of creating the xml string is done in the bean <span class="codeInline">FactoryDetailsBean. </span>The relevant code is as follows:</p>
      <p class="codeBlock code_container"> private String getFactoryDetailsXML(String factoryId){<br />
//strXML will be used to store the entire XML document generated<br />
String strXML=&quot;&quot;;<br />
try{<br />
DBConnection dbConn = new DBConnection();<br />
Connection oConn= dbConn.getConnection();<br />
//Database Objects - Initialization<br />
Statement st=null;<br />
ResultSet rs=null;<br />
java.sql.Date date=null;<br />
java.util.Date uDate=null;<br />
String uDateStr=&quot;&quot;;<br />
String quantity=&quot;&quot;;<br />
<br />
String strQuery=&quot;&quot;;<br />
<br />
<br />
Map&lt;String,String&gt; chartAttributes=new HashMap&lt;String, String&gt;();<br />
chartAttributes.put(&quot;caption&quot;, &quot;Factory &quot;+factoryId+&quot; Output&quot;);<br />
chartAttributes.put(&quot;subCaption&quot;, &quot;(In Units)&quot;);<br />
chartAttributes.put(&quot;xAxisName&quot;, &quot;Date&quot;);<br />
chartAttributes.put(&quot;showValues&quot;, &quot;1&quot;);<br />
chartAttributes.put(&quot;labelStep&quot;, &quot;2&quot;);<br />
chartAttributes.put(&quot;palette&quot;, &quot;2&quot;);<br />
<br />
DOMHelper domHelper = new DOMHelper();<br />
Document chartDoc = domHelper.getDocument();<br />
Element rootElement = chartDoc.createElement(&quot;chart&quot;);<br />
domHelper.addAttributesToElement(rootElement, chartAttributes);<br />
<br />
<br />
//Now, we get the data for that factory<br />
strQuery = &quot;select * from Factory_Output where FactoryId=&quot; + factoryId+ &quot; order by DatePro Asc &quot;;<br />
<br />
st=oConn.createStatement();<br />
rs=st.executeQuery(strQuery);<br />
<br />
<br />
while(rs.next()) {<br />
date=rs.getDate(&quot;DatePro&quot;);<br />
quantity=rs.getString(&quot;Quantity&quot;);<br />
if(date!=null) {<br />
uDate=new java.util.Date(date.getTime());<br />
SimpleDateFormat sdf=new SimpleDateFormat(&quot;dd/MM&quot;);<br />
uDateStr=sdf.format(uDate);<br />
}<br />
//Generate &lt;set label='..' value='..'/&gt; <br />
Element setElem = chartDoc.createElement(&quot;set&quot;);<br />
setElem.setAttribute(&quot;label&quot;, uDateStr);<br />
setElem.setAttribute(&quot;value&quot;, quantity);<br />
rootElement.appendChild(setElem);<br />
}<br />
//Finally, close &lt;chart&gt; element<br />
chartDoc.appendChild(rootElement);<br />
strXML=domHelper.getXMLString(chartDoc);<br />
//close the resultset,statement,connection<br />
//enclose them in try catch block<br />
try {<br />
if(null!=rs){<br />
rs.close();<br />
rs=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the resultset&quot;);<br />
}<br />
try{<br />
if(null!=st) {<br />
st.close();<br />
st=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
try {<br />
if(null!=oConn) {<br />
oConn.close();<br />
oConn=null;<br />
}<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the connection&quot;);<br />
}<br />
<br />
<br />
}catch(java.sql.SQLException e){<br />
System.out.println(&quot;Could not close the statement&quot;);<br />
}<br />
<br />
return strXML;<br />
}</p>
      <p>Here, we are iterating through all the rows in the Factory_Output table for the given factoryId and creating the set elements as child of the chart element.</p>
      <p>Note that here also, we have used useSingleQuotes=&quot;true&quot; in the jsp since we have used dom to create the xml. </p>
      <p>When you now run the app, you'll see the detailed page as under: </p></td>
  </tr>
  <tr>
    <td valign="top" class="text"><img src="../../Images/Code_Drill.jpg" width="599" height="292" class="imageBorder" />&nbsp;</td>
  </tr>
</table>
</body>
</html>
